version: '3.8'

# Load environment variables from .env file
services:
  # Development service
  app-dev:
    build: 
      context: .
      target: development
    container_name: node-hexagonal-dev
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    env_file:
      - .env
    environment:
      - NODE_ENV=development
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: npm run dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${PORT:-3000}/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - app-network
    depends_on:
      - mongodb
    develop:
      watch:
        - action: rebuild
          path: ./package.json
        - action: rebuild
          path: ./package-lock.json
    profiles:
      - dev

  # Production service
  app-prod:
    build:
      context: .
      target: production
    container_name: node-hexagonal-prod
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    env_file:
      - .env
    environment:
      - NODE_ENV=production
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: npm start
    networks:
      - app-network
    depends_on:
      - mongodb
    profiles:
      - prod
    
  # MongoDB service
  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
    profiles:
      - dev
      - prod

  # Ngrok service for exposing the application to the internet
  ngrok:
    image: ngrok/ngrok:latest
    container_name: ngrok
    ports:
      - "4040:4040"
    env_file:
      - .env
    command: http app-dev:${PORT:-3000} --domain=${NGROK_DOMAIN}
    depends_on:
      - app-dev
    networks:
      - app-network
    profiles:
      - dev

networks:
  app-network:
    driver: bridge

volumes:
  mongodb_data: 